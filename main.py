import os
import yt_dlp
import asyncio
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

async def download_video(tweet_url):
    """–°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —Å X (Twitter) –≤ –Ω–∞–∏–ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ"""
    output_path = "video.mp4"
    ydl_opts = {
        "outtmpl": output_path,
        "format": "best",  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    }

    # –í—ã–ø–æ–ª–Ω—è–µ–º `yt-dlp` –≤ —Ñ–æ–Ω–µ
    await asyncio.to_thread(lambda: yt_dlp.YoutubeDL(ydl_opts).download([tweet_url]))
    
    return output_path

@router.message(Command("start"))
async def start_cmd(message: Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ X (Twitter), –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –≤ –Ω–∞–∏–ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ.")

@router.message(lambda message: "x.com" in message.text or "twitter.com" in message.text)
async def handle_twitter_video(message: Message):
    tweet_url = message.text.strip()
    status_message = await message.reply("‚è¨ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ...")

    try:
        video_path = await download_video(tweet_url)  # ‚úÖ –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        with open(video_path, "rb") as video:
            await message.reply_video(video)
        os.remove(video_path)  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    except Exception as e:
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message()
async def unknown_message(message: Message):
    await message.reply("üöÄ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ X (Twitter)!")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
